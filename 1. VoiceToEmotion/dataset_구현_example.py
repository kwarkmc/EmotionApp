# -*- coding: utf-8 -*-
"""Dataset 구현_Example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JUicN-bug7LQVX92dXUxK8cdxx7rIsKs
"""

#https://velog.io/@tjdtnsu/PyTorch-%EA%B8%B0%EC%B4%88-Dataset-%EB%A7%8C%EB%93%A4%EA%B8%B0
import os
import torch
from torch.utils.data import Dataset
from PIL import Image
import torchvision.transforms as transforms

class MyDaseDataset(Dataset):
  def __init__(self, x_data, y_data):
    self.x_data = x_data
    self.y_data = y_data
    #init 매서드는 객체를 생성할때 실행되는 생성자. 모델에 사용할 데이터를 담아두고, 인덱스가 주어졌을 때 반환할 수 있게 만드는 초기작업

  def __getitem__(self, index):
    return self.x_data[index], self.y_data[index]
    #getitem 매서드는 인덱스가 주어졌을 때 데이터를 반환 (Numpy나 텐서 형식으로 반환, 입력과 출력 형식을 튜플로 반환)

  def __len__(self):
    return self.x_data.shape[0]
    #len 매서드는 학습에 사용될 총 데이터의 개수를 인덱스로 반환

x_data = torch.arange(100)
y_data = x_data*x_data
dataset = MyDaseDataset(x_data, y_data)
print("dataset example : ", dataset[0], dataset[1], dataset[5])
print("dataset length : ", len(dataset))

class DogCatDataset(Dataset):
  def __init__(self, data_dir):
    self.data_dir = os.listdir(data_dir)
    self.image_path_list = os.listdir(data_dir)
    self.transform = transforms.ToTensor() #이미지를 Tensor로 변환하여야 pytorch에서 사용할 수 있다.

  def __getitem__(self, index):
    image_path = os.path.join(self.data_dir, self.image_path_list[index])

    x_data = Image.open(image_path)
    x_data = self.transform(x_data)
    y_data = 1 if "dog" in self.image_path_list[index] else 0

    return x_data, y_data

  def __len__(self):
    return len(self.image_path_list)

